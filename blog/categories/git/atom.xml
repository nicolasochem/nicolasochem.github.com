<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: git | Mind Passthrough]]></title>
  <link href="http://nicolasochem.github.io/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://nicolasochem.github.io/"/>
  <updated>2014-04-22T08:55:50-07:00</updated>
  <id>http://nicolasochem.github.io/</id>
  <author>
    <name><![CDATA[Nicolas Ochem]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Branch-aware Git Submodules]]></title>
    <link href="http://nicolasochem.github.io/blog/2014/02/16/branch-aware-git-submodules/"/>
    <updated>2014-02-16T17:59:00-08:00</updated>
    <id>http://nicolasochem.github.io/blog/2014/02/16/branch-aware-git-submodules</id>
    <content type="html"><![CDATA[<p>Large software projects often build their release from many repositories. It it tempting to set up a super-repository referencing all your shipping code through <a href="http://git-scm.com/docs/git-submodule">git submodules</a>. Since each commit of your superproject contains an unambiguous reference to a particular commit of every submodule, you can tag your superproject to define a release or nightly build.</p>

<p>All it takes is a single command to retrieve all the source code for a particular release.</p>

<p>``` bash</p>

<h1>checking out all source code for 3.11 release</h1>

<p>git clone &mdash;recursive superproject -b 3.11
```</p>

<p>It is very useful for archival purposes or code escrow. In this post, we explore how to set that up.</p>

<h2>Setting up submodules</h2>

<p>There used to be no straightforward way to update your submodules. You would have to extract the SHA checksum of the desired commit of every submodule, and point your superproject to each one of them. <code>git submodule update</code> would check out the submodule code. Add branching logic to the mix, and you ended up with fairly complex code.</p>

<p>Since <a href="https://raw.github.com/git/git/master/Documentation/RelNotes/1.8.2.txt">git 1.8.2</a>, it has become much easier. When defining a submodule, you can now specify which branch it is supposed to track.</p>

<p>Say you are building your superproject from components A and B. Your development builds are built from branch <code>master</code> of component A and branch <code>dev</code> of component B. The following commands will set up the superproject:</p>

<p><code>bash
git init
git submodule --branch dev add &lt;git repo of component A&gt;
git submodule --branch master add &lt;git repo of component B&gt;
</code></p>

<p>Git will store the relationship with the sumbodules in the .gitmodule file.</p>

<p>``` bash</p>

<h1>content of .gitmodules files on master branch</h1>

<p>[submodule &ldquo;component_A&rdquo;]</p>

<pre><code>path = component_A
url = &lt;git repo of component A&gt;
branch = dev
</code></pre>

<p>[submodule &ldquo;component_B&rdquo;]</p>

<pre><code>path = component_B
url = &lt;git repo of component B&gt;
branch = master
</code></pre>

<p>```</p>

<p>Then all it takes to fetch the last commits from the components is:
<code>bash
git submodule update --remote
</code></p>

<p>You can issue <code>git submodule status</code> to verify that the commit SHA1 hashes match the latest commits of your component repositories:</p>

<p><code>bash
nochem@bonk:/tmp/submodules/superproject$ git submodule status
 9665f1cd09faa63c6e3211712a805c49bf99c7c5 component_A (heads/dev)
 323db44f229e794850fec8afb5e8964d813d9a30 component_B (heads/master)
</code></p>

<p>Then your automated build system may just automatically tag nightlies for all your components every night:</p>

<p>``` bash
git checkout master
git submodule update &mdash;remote</p>

<h1>do the build.</h1>

<p>git commit -a -m &ldquo;Nightly build 345&rdquo;
git tag master-nightly-345
```</p>

<p>Of course, this does not dispense you from tagging your component repositories individually.</p>

<h2>Adding a branch</h2>

<p>If your release branch is named &ldquo;3.11&rdquo; on both components, you may create a branch 3.11 on your superproject, delete the submodules (with the <code>git submodule deinit</code> command available since <a href="https://raw.github.com/git/git/master/Documentation/RelNotes/1.8.3.txt">release 1.8.3</a> of git), then recreate them again giving the correct <code>--branch</code> option.</p>

<p>Or you may just edit your .gitmodules file and check it in to the repo.</p>

<p>``` bash</p>

<h1>content of manually edited .gitmodules files on 3.11 release branch</h1>

<p>[submodule &ldquo;component_A&rdquo;]</p>

<pre><code>path = component_A
url = &lt;git repo of component A&gt;
branch = 3.11
</code></pre>

<p>[submodule &ldquo;component_B&rdquo;]</p>

<pre><code>path = component_B
url = &lt;git repo of component B&gt;
branch = 3.11
</code></pre>

<p>```</p>

<p>Then, when on branch 3.11 of your superproject, <code>git submodule update --remote</code> will fetch the latest release branch content from all submodules.</p>

<p><code>bash
nochem@bonk:/tmp/submodules/superproject$ git submodule update --remote
Submodule path 'component_A': checked out '56d62717ac6f5fb4e67daa331c5ef566588cec4e'
Submodule path 'component_B': checked out '312df465c70cb81ffaf6dd6f2d505df44c8db45f'
nochem@bonk:/tmp/submodules/superproject$ git submodule status
 56d62717ac6f5fb4e67daa331c5ef566588cec4e component_A (heads/3.11)
 312df465c70cb81ffaf6dd6f2d505df44c8db45f component_B (heads/3.11)
</code></p>

<p>You may now tag and commit again:</p>

<p><code>bash
git commit -a -m "release 3.11 nightly build 5"
git tag "3.11-nightly-5"
</code></p>

<p>You have now set a multi-branch superproject tracking all branches of all your components. Isn&rsquo;t it nice ?</p>

<p>Thus said, a word of warning is necessary. Git submodules are recently receiving a lot of improvements, but <a href="http://codingkilledthecat.wordpress.com/2012/04/28/why-your-company-shouldnt-use-git-submodules/">they are no panacea</a>. If your component repositories are very dependent on one another, and developers are likely to commit to several repositories, then you may be better off having one big repository. This model works well when your different components are worked on by different teams, and you are looking for an easy way to check out or tag all the code.</p>

<p><em>All the code used in this post is also available as <a href="https://gist.github.com/nicolasochem/9054876">a gist</a></em>.</p>
]]></content>
  </entry>
  
</feed>
